{"name": "test_testsignin", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom unknown error: unexpected command response\n  (Session info: chrome=103.0.5060.53)\nStacktrace:\n0   chromedriver                        0x00000001046a1d14 chromedriver + 3792148\n1   chromedriver                        0x0000000104638828 chromedriver + 3360808\n2   chromedriver                        0x00000001043390b8 chromedriver + 217272\n3   chromedriver                        0x0000000104328124 chromedriver + 147748\n4   chromedriver                        0x00000001043278f4 chromedriver + 145652\n5   chromedriver                        0x0000000104326f50 chromedriver + 143184\n6   chromedriver                        0x0000000104326058 chromedriver + 139352\n7   chromedriver                        0x00000001043264f8 chromedriver + 140536\n8   chromedriver                        0x0000000104332394 chromedriver + 189332\n9   chromedriver                        0x000000010433fa20 chromedriver + 244256\n10  chromedriver                        0x000000010432679c chromedriver + 141212\n11  chromedriver                        0x000000010433f69c chromedriver + 243356\n12  chromedriver                        0x0000000104391d74 chromedriver + 580980\n13  chromedriver                        0x000000010435e318 chromedriver + 369432\n14  chromedriver                        0x00000001046771e8 chromedriver + 3617256\n15  chromedriver                        0x000000010467b678 chromedriver + 3634808\n16  chromedriver                        0x000000010467fc6c chromedriver + 3652716\n17  chromedriver                        0x000000010467c110 chromedriver + 3637520\n18  chromedriver                        0x000000010465a7ac chromedriver + 3499948\n19  chromedriver                        0x0000000104693bf0 chromedriver + 3734512\n20  chromedriver                        0x0000000104693d54 chromedriver + 3734868\n21  chromedriver                        0x00000001046a8558 chromedriver + 3818840\n22  libsystem_pthread.dylib             0x00000001bb38826c _pthread_start + 148\n23  libsystem_pthread.dylib             0x00000001bb38308c thread_start + 8", "trace": "driver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"d8fbf6b233850a36d8b9cb6599719560\")>\n\n    def test_testsignin(driver):\n        driver.get(\"https://automationexercise.com/\")\n>       driver.find_element(By.LINK_TEXT, \"Signup / Login\").click()\n\ntest_testpositiveloginsingup.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10daff1f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...0001bb38826c _pthread_start + 148\\\\n23  libsystem_pthread.dylib             0x00000001bb38308c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from unknown error: unexpected command response\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001046a1d14 chromedriver + 3792148\nE       1   chromedriver                        0x0000000104638828 chromedriver + 3360808\nE       2   chromedriver                        0x00000001043390b8 chromedriver + 217272\nE       3   chromedriver                        0x0000000104328124 chromedriver + 147748\nE       4   chromedriver                        0x00000001043278f4 chromedriver + 145652\nE       5   chromedriver                        0x0000000104326f50 chromedriver + 143184\nE       6   chromedriver                        0x0000000104326058 chromedriver + 139352\nE       7   chromedriver                        0x00000001043264f8 chromedriver + 140536\nE       8   chromedriver                        0x0000000104332394 chromedriver + 189332\nE       9   chromedriver                        0x000000010433fa20 chromedriver + 244256\nE       10  chromedriver                        0x000000010432679c chromedriver + 141212\nE       11  chromedriver                        0x000000010433f69c chromedriver + 243356\nE       12  chromedriver                        0x0000000104391d74 chromedriver + 580980\nE       13  chromedriver                        0x000000010435e318 chromedriver + 369432\nE       14  chromedriver                        0x00000001046771e8 chromedriver + 3617256\nE       15  chromedriver                        0x000000010467b678 chromedriver + 3634808\nE       16  chromedriver                        0x000000010467fc6c chromedriver + 3652716\nE       17  chromedriver                        0x000000010467c110 chromedriver + 3637520\nE       18  chromedriver                        0x000000010465a7ac chromedriver + 3499948\nE       19  chromedriver                        0x0000000104693bf0 chromedriver + 3734512\nE       20  chromedriver                        0x0000000104693d54 chromedriver + 3734868\nE       21  chromedriver                        0x00000001046a8558 chromedriver + 3818840\nE       22  libsystem_pthread.dylib             0x00000001bb38826c _pthread_start + 148\nE       23  libsystem_pthread.dylib             0x00000001bb38308c thread_start + 8\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException"}, "start": 1656874812299, "stop": 1656874822718, "uuid": "a96da8c4-0c13-4acb-83d5-7b06193a3a27", "historyId": "dc802189081b1d7949c70b8080b0f724", "testCaseId": "ced1f2e64a5f8d16ca3e2555fd521f67", "fullName": "test_testpositiveloginsingup#test_testsignin", "labels": [{"name": "suite", "value": "test_testpositiveloginsingup"}, {"name": "host", "value": "Khaleds-MacBook-Pro.local"}, {"name": "thread", "value": "7913-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_testpositiveloginsingup"}]}