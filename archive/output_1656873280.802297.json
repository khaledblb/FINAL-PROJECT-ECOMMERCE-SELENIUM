{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture()\n    def driver():\n        firefox_driver_binary = \"./geckodriver\"\n        ser_firefox = FirefoxService(firefox_driver_binary)\n        safari_options = SafariOptions()\n        firefox_options = FireFoxOptions()\n        chrome_options = ChromeOptions()\n        browser_name = \"chrome\"\n    \n        # if isinstance(browserName,list):\n        #     for browser_name in browserName:\n        if browser_name == \"firefox-webdriver\":\n            driver = webdriver.Firefox(service=ser_firefox)\n        elif browser_name == \"firefox\":\n            dc = {\n                \"browserName\": \"firefox\",\n                #\"browserVersion\": \"101.0.1(x64)\",\n                \"platformName\": \"MAC\"\n            }\n            # firefox_options.add_argument(\"--headless\")\n            # firefox_options.add_argument(\"--disable-gpu\")\n            # driver = webdriver.Remote(\"http://localhost:4444\" ,desired_capabilities=dc,options=firefox_options)\n            driver = webdriver.Remote(\"http://localhost:4444\" ,desired_capabilities=dc)\n    \n        elif browser_name == \"safari\":\n            safari_options.add_argument(\"--headless\")\n            dc = {\n                \"browserName\": \"safari\",\n                \"platformName\": \"MAC\"\n            }\n            driver = webdriver.Remote(\"http://localhost:4444\",desired_capabilities=dc)\n    \n        elif browser_name == \"chrome\":\n            dc = {\n                \"browserName\": \"chrome\",\n                \"platformName\": \"MAC\"\n            }\n            # chrome_options.add_argument(\"--headless\")\n            # chrome_options.add_argument(\"--disable-gpu\")\n            # driver = webdriver.Remote(\"http://192.168.1.189:4444\", desired_capabilities=dc,options=chrome_options)\n>           driver = webdriver.Remote(\"http://localhost:4444\", desired_capabilities=dc)\n\nconftest.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:277: in __init__\n    self.start_session(capabilities, browser_profile)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:370: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10ceb4790>\nresponse = {'status': 500, 'value': '{\\n  \"value\": {\\n    \"error\": \"session not created\",\\n    \"message\": \"Could not start a new ...\"className\": \"java.lang.Thread\",\\n        \"lineNumber\": 833,\\n        \"classLoaderName\": null\\n      }\\n    ]\\n  }\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: Could not start a new session. Timed out creating session\nE       Build info: version: '4.2.2', revision: '683ccb65d6'\nE       System info: host: 'Khaleds-MacBook-Pro.local', ip: 'fe80:0:0:0:413:29ae:882:e5de%en0', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '12.4', java.version: '18.0.1.1'\nE       Driver info: driver.version: unknown\nE       Stacktrace:\nE           at org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue.failDueToTimeout (LocalNewSessionQueue.java:387)\nE           at java.lang.Iterable.forEach (Iterable.java:75)\nE           at org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue.timeoutSessions (LocalNewSessionQueue.java:154)\nE           at org.openqa.selenium.concurrent.GuardedRunnable.lambda$guard$0 (GuardedRunnable.java:36)\nE           at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:539)\nE           at java.util.concurrent.FutureTask.runAndReset (FutureTask.java:305)\nE           at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run (ScheduledThreadPoolExecutor.java:305)\nE           at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1136)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:635)\nE           at java.lang.Thread.run (Thread.java:833)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: SessionNotCreatedException\n", "test_name": "test_testsignin", "rerun": "0"}}, "suite_name": "test_testpositiveloginsingup.py"}}}, "date": "July 03, 2022", "start_time": 1656868024.76428, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}